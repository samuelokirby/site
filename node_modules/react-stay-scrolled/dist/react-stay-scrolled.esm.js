import { useRef, useCallback, useEffect, useLayoutEffect } from 'react';
import invariant from 'tiny-invariant';
import memoize from 'memoize-one';

// eslint-disable-next-line import/prefer-default-export
var maxScrollTop = function maxScrollTop(dom) {
  return dom.scrollHeight - dom.clientHeight;
};

var defaultRunScroll = memoize(function (domRef) {
  return function (offset) {
    domRef.current.scrollTop = offset;
  };
});
var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;
var index = (function (domRef) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$initialScroll = _ref.initialScroll,
      initialScroll = _ref$initialScroll === void 0 ? null : _ref$initialScroll,
      _ref$inaccuracy = _ref.inaccuracy,
      inaccuracy = _ref$inaccuracy === void 0 ? 0 : _ref$inaccuracy,
      _ref$runScroll = _ref.runScroll,
      runScroll = _ref$runScroll === void 0 ? defaultRunScroll(domRef) : _ref$runScroll;

  var wasScrolled = useRef(null);
  var isScrolled = useCallback(function () {
    return Math.ceil(domRef.current.scrollTop) >= maxScrollTop(domRef.current) - inaccuracy;
  }, [inaccuracy]);
  useEffect(function () {
    var onScroll = function onScroll() {
      wasScrolled.current = isScrolled();
    };

    domRef.current.addEventListener('scroll', onScroll);
    return function () {
      return domRef.current.removeEventListener('scroll', onScroll);
    };
  }, []);
  var scroll = useCallback(function (position) {
    !(domRef.current !== null) ? process.env.NODE_ENV !== "production" ? invariant(false, "Trying to scroll to the bottom, but no element was found.\n      Did you call this scrollBottom before the component with this hook finished mounting?") : invariant(false) : void 0;
    var offset = Math.min(maxScrollTop(domRef.current), position);
    runScroll(offset);
  }, [runScroll]);
  var scrollBottom = useCallback(function () {
    scroll(Infinity);
  }, [scroll]);
  var stayScrolled = useCallback(function () {
    if (wasScrolled.current) scrollBottom();
    return wasScrolled.current;
  }, [scrollBottom]);
  useIsomorphicLayoutEffect(function () {
    if (initialScroll !== null) {
      scroll(initialScroll);
    }

    wasScrolled.current = isScrolled();
  }, []);
  return {
    scroll: scroll,
    stayScrolled: stayScrolled,
    scrollBottom: scrollBottom,
    isScrolled: isScrolled
  };
});

export default index;
