{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sam/Desktop/psite/src/pages/Test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useMeasure } from \"react-use\";\nimport style from \"./accordion.module.css\";\n\nconst Test = () => {\n  _s();\n\n  const defaultHeight = \"100px\"; // Manages the open or cloased state of the accordion\n\n  const [open, toggle] = useState(false); // The height of the content inside of the accordion\n\n  const [contentHeight, setContentHeight] = useState(defaultHeight); // Gets the height of the element (ref)\n\n  const [ref, {\n    height\n  }] = useMeasure(); // Animations\n\n  const expand = useSpring({\n    config: {\n      friction: 10\n    },\n    height: open ? `${contentHeight}px` : defaultHeight\n  });\n  const spin = useSpring({\n    config: {\n      friction: 10\n    },\n    transform: open ? \"rotate(180deg)\" : \"rotate(0deg)\"\n  });\n  useEffect(() => {\n    //Sets initial height\n    setContentHeight(height); //Adds resize event listener\n\n    window.addEventListener(\"resize\", setContentHeight(height)); // Clean-up\n\n    return window.removeEventListener(\"resize\", setContentHeight(height));\n  }, [height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(animated.div, {\n      className: style.accordion,\n      style: expand,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref,\n        className: style.content,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi at augue laoreet, eleifend turpis a, tincidunt velit. Curabitur vitae felis sit amet arcu blandit pellentesque quis vitae odio. Aenean pharetra eu felis non suscipit. Etiam fermentum enim sit amet magna scelerisque, eu mattis ligula tristique. Aliquam sed cursus odio, sit amet condimentum eros. Proin molestie commodo urna, eget accumsan tellus laoreet ut. Morbi id est eu lorem tempor cursus. Aenean vitae ultrices sem. Phasellus venenatis velit in ultrices interdum. Cras semper, justo a maximus iaculis, nisl metus luctus nisl, ac sodales odio mauris et ante. Donec ipsum est, auctor a lorem ac, rutrum elementum magna.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(animated.button, {\n      className: style.expand,\n      onClick: () => toggle(!open),\n      style: spin,\n      children: \"down\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Test, \"OQaAccXekJWawpie6hcRcLBHNyM=\", false, function () {\n  return [useMeasure, useSpring, useSpring];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/sam/Desktop/psite/src/pages/Test.js"],"names":["React","useState","useEffect","useSpring","animated","useMeasure","style","Test","defaultHeight","open","toggle","contentHeight","setContentHeight","ref","height","expand","config","friction","spin","transform","window","addEventListener","removeEventListener","wrapper","accordion","content"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAMC,aAAa,GAAG,OAAtB,CADiB,CAGjB;;AACA,QAAM,CAACC,IAAD,EAAOC,MAAP,IAAiBT,QAAQ,CAAC,KAAD,CAA/B,CAJiB,CAMjB;;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAACO,aAAD,CAAlD,CAPiB,CASjB;;AACA,QAAM,CAACK,GAAD,EAAM;AAAEC,IAAAA;AAAF,GAAN,IAAoBT,UAAU,EAApC,CAViB,CAYjB;;AACA,QAAMU,MAAM,GAAGZ,SAAS,CAAC;AACvBa,IAAAA,MAAM,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KADe;AAEvBH,IAAAA,MAAM,EAAEL,IAAI,GAAI,GAAEE,aAAc,IAApB,GAA0BH;AAFf,GAAD,CAAxB;AAIA,QAAMU,IAAI,GAAGf,SAAS,CAAC;AACrBa,IAAAA,MAAM,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KADa;AAErBE,IAAAA,SAAS,EAAEV,IAAI,GAAG,gBAAH,GAAsB;AAFhB,GAAD,CAAtB;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd;AACAU,IAAAA,gBAAgB,CAACE,MAAD,CAAhB,CAFc,CAId;;AACAM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCT,gBAAgB,CAACE,MAAD,CAAlD,EALc,CAOd;;AACA,WAAOM,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCV,gBAAgB,CAACE,MAAD,CAArD,CAAP;AACD,GATQ,EASN,CAACA,MAAD,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAER,KAAK,CAACiB,OAAtB;AAAA,4BACE,QAAC,QAAD,CAAU,GAAV;AAAc,MAAA,SAAS,EAAEjB,KAAK,CAACkB,SAA/B;AAA0C,MAAA,KAAK,EAAET,MAAjD;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEF,GAAV;AAAe,QAAA,SAAS,EAAEP,KAAK,CAACmB,OAAhC;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAkBE,QAAC,QAAD,CAAU,MAAV;AACE,MAAA,SAAS,EAAEnB,KAAK,CAACS,MADnB;AAEE,MAAA,OAAO,EAAE,MAAML,MAAM,CAAC,CAACD,IAAF,CAFvB;AAGE,MAAA,KAAK,EAAES,IAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA7DD;;GAAMX,I;UAUsBF,U,EAGXF,S,EAIFA,S;;;KAjBTI,I;AA+DN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useMeasure } from \"react-use\";\nimport style from \"./accordion.module.css\";\n\nconst Test = () => {\n  const defaultHeight = \"100px\";\n\n  // Manages the open or cloased state of the accordion\n  const [open, toggle] = useState(false);\n\n  // The height of the content inside of the accordion\n  const [contentHeight, setContentHeight] = useState(defaultHeight);\n\n  // Gets the height of the element (ref)\n  const [ref, { height }] = useMeasure();\n\n  // Animations\n  const expand = useSpring({\n    config: { friction: 10 },\n    height: open ? `${contentHeight}px` : defaultHeight\n  });\n  const spin = useSpring({\n    config: { friction: 10 },\n    transform: open ? \"rotate(180deg)\" : \"rotate(0deg)\"\n  });\n\n  useEffect(() => {\n    //Sets initial height\n    setContentHeight(height);\n\n    //Adds resize event listener\n    window.addEventListener(\"resize\", setContentHeight(height));\n\n    // Clean-up\n    return window.removeEventListener(\"resize\", setContentHeight(height));\n  }, [height]);\n\n  return (\n    <div className={style.wrapper}>\n      <animated.div className={style.accordion} style={expand}>\n        <div ref={ref} className={style.content}>\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi at\n            augue laoreet, eleifend turpis a, tincidunt velit. Curabitur vitae\n            felis sit amet arcu blandit pellentesque quis vitae odio. Aenean\n            pharetra eu felis non suscipit. Etiam fermentum enim sit amet magna\n            scelerisque, eu mattis ligula tristique. Aliquam sed cursus odio,\n            sit amet condimentum eros. Proin molestie commodo urna, eget\n            accumsan tellus laoreet ut. Morbi id est eu lorem tempor cursus.\n            Aenean vitae ultrices sem. Phasellus venenatis velit in ultrices\n            interdum. Cras semper, justo a maximus iaculis, nisl metus luctus\n            nisl, ac sodales odio mauris et ante. Donec ipsum est, auctor a\n            lorem ac, rutrum elementum magna.\n          </p>\n        </div>\n      </animated.div>\n      <animated.button\n        className={style.expand}\n        onClick={() => toggle(!open)}\n        style={spin}\n      >\n        down\n      </animated.button>\n    </div>\n  );\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}