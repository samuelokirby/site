{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sam/Desktop/psite/src/components/TestCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useMeasure } from \"react-use\";\nimport style from \"./accordion.module.css\";\nimport { Card, Typography } from \"@material-ui/core\";\nimport DoubleChevron from \"../icons/DoubleChevrons.svg\";\n\nconst TestCard = props => {\n  _s();\n\n  const defaultHeight = \"100px\"; // Manages the open or cloased state of the accordion\n\n  const [open, toggle] = useState(false); // The height of the content inside of the accordion\n\n  const [contentHeight, setContentHeight] = useState(defaultHeight); // Gets the height of the element (ref)\n\n  const [ref, {\n    height\n  }] = useMeasure(); // Animations\n\n  const expand = useSpring({\n    config: {\n      friction: 10\n    },\n    height: open ? `${contentHeight}px` : defaultHeight\n  });\n  const spin = useSpring({\n    config: {\n      friction: 10\n    },\n    transform: open ? \"rotate(180deg)\" : \"rotate(0deg)\"\n  });\n  useEffect(() => {\n    //Sets initial height\n    setContentHeight(height); //Adds resize event listener\n\n    window.addEventListener(\"resize\", setContentHeight(height)); // Clean-up\n\n    return window.removeEventListener(\"resize\", setContentHeight(height));\n  }, [height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.wrapper,\n    children: [/*#__PURE__*/_jsxDEV(animated.div, {\n      className: style.accordion,\n      style: expand,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          ref: ref,\n          className: style.content,\n          elevation: 0,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            style: {\n              fontWeight: 'bold'\n            },\n            children: props.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: props.setting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: props.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            style: {\n              overflow: 'hidden'\n            },\n            children: props.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(animated.button, {\n      className: style.expand,\n      onClick: () => toggle(!open),\n      style: spin,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: DoubleChevron\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestCard, \"OQaAccXekJWawpie6hcRcLBHNyM=\", false, function () {\n  return [useMeasure, useSpring, useSpring];\n});\n\n_c = TestCard;\nexport default TestCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestCard\");","map":{"version":3,"sources":["/Users/sam/Desktop/psite/src/components/TestCard.js"],"names":["React","useState","useEffect","useSpring","animated","useMeasure","style","Card","Typography","TestCard","props","defaultHeight","open","toggle","contentHeight","setContentHeight","ref","height","expand","config","friction","spin","transform","window","addEventListener","removeEventListener","wrapper","accordion","content","fontWeight","title","setting","date","overflow","description","DoubleChevron"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport { useMeasure } from \"react-use\";\nimport style from \"./accordion.module.css\";\nimport {Card, Typography} from \"@material-ui/core\";\nimport DoubleChevron from '../icons/DoubleChevrons.svg'\n\nconst TestCard = (props) => {\n  const defaultHeight = \"100px\";\n\n  // Manages the open or cloased state of the accordion\n  const [open, toggle] = useState(false);\n\n  // The height of the content inside of the accordion\n  const [contentHeight, setContentHeight] = useState(defaultHeight);\n\n  // Gets the height of the element (ref)\n  const [ref, { height }] = useMeasure();\n\n  // Animations\n  const expand = useSpring({\n    config: { friction: 10 },\n    height: open ? `${contentHeight}px` : defaultHeight\n  });\n  const spin = useSpring({\n    config: { friction: 10 },\n    transform: open ? \"rotate(180deg)\" : \"rotate(0deg)\"\n  });\n\n  useEffect(() => {\n    //Sets initial height\n    setContentHeight(height);\n\n    //Adds resize event listener\n    window.addEventListener(\"resize\", setContentHeight(height));\n\n    // Clean-up\n    return window.removeEventListener(\"resize\", setContentHeight(height));\n  }, [height]);\n\n  return (\n    <div className={style.wrapper}>\n      <animated.div className={style.accordion} style={expand}>\n        <div>\n          <Card ref={ref} className={style.content} elevation={0}>\n            <Typography variant=\"h5\" style={{fontWeight: 'bold'}}>\n              {props.title}\n            </Typography>\n            <Typography variant=\"h6\">\n              {props.setting}\n            </Typography>\n            <Typography variant=\"h6\">\n              {props.date}\n            </Typography>\n\n            <Typography variant=\"body1\" style={{overflow: 'hidden'}}>\n              {props.description}\n            </Typography>\n          </Card>\n        </div>\n      </animated.div>\n      <animated.button\n        className={style.expand}\n        onClick={() => toggle(!open)}\n        style={spin}\n      >\n        <img src={DoubleChevron}/>\n      </animated.button>\n    </div>\n  );\n};\n\nexport default TestCard;\n"]},"metadata":{},"sourceType":"module"}